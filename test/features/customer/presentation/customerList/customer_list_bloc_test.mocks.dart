// Mocks generated by Mockito 5.4.0 from annotations
// in mc_crud_test/test/features/customer/presentation/customerList/customer_list_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mc_crud_test/core/models/failure.dart' as _i6;
import 'package:mc_crud_test/features/customer/domain/customer.entity.dart'
    as _i7;
import 'package:mc_crud_test/features/customer/domain/customer.respository.dart'
    as _i2;
import 'package:mc_crud_test/features/customer/domain/usecases/delete_customer.usecase.dart'
    as _i8;
import 'package:mc_crud_test/features/customer/domain/usecases/get_customer_list.usecase.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCustomerRepository_0 extends _i1.SmartFake
    implements _i2.CustomerRepository {
  _FakeCustomerRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetCustomerListUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCustomerListUseCase extends _i1.Mock
    implements _i4.GetCustomerListUseCase {
  MockGetCustomerListUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CustomerRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCustomerRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CustomerRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Customer>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.Customer>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.Customer>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Customer>>>);
}

/// A class which mocks [DeleteCustomerUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteCustomerUseCase extends _i1.Mock
    implements _i8.DeleteCustomerUseCase {
  MockDeleteCustomerUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call(_i7.Customer? customer) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [customer],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
            _FakeEither_1<_i6.Failure, void>(
          this,
          Invocation.method(
            #call,
            [customer],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, void>>);
}
